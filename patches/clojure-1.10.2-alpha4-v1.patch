diff --git a/src/jvm/clojure/lang/PersistentVector.java b/src/jvm/clojure/lang/PersistentVector.java
index fcd9e46c..f1cde568 100644
--- a/src/jvm/clojure/lang/PersistentVector.java
+++ b/src/jvm/clojure/lang/PersistentVector.java
@@ -522,16 +522,19 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 	volatile int shift;
 	volatile Node root;
 	volatile Object[] tail;
+	final AtomicReference<Thread> edit;
 
-	TransientVector(int cnt, int shift, Node root, Object[] tail){
+	TransientVector(int cnt, int shift, Node root, Object[] tail, AtomicReference<Thread> edit){
 		this.cnt = cnt;
 		this.shift = shift;
 		this.root = root;
 		this.tail = tail;
+		this.edit = edit;
 	}
 
 	TransientVector(PersistentVector v){
-		this(v.cnt, v.shift, editableRoot(v.root), editableTail(v.tail));
+		this(v.cnt, v.shift, v.root, editableTail(v.tail),
+		     new AtomicReference<Thread>(Thread.currentThread()));
 	}
 
 	public int count(){
@@ -540,21 +543,14 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 	}
 	
 	Node ensureEditable(Node node){
-		if(node.edit == root.edit)
+		if(node.edit == edit)
 			return node;
-		return new Node(root.edit, node.array.clone());
+		return new Node(edit, node.array.clone());
 	}
 
 	void ensureEditable(){
-		if(root.edit.get() == null)
+		if(edit.get() == null)
 			throw new IllegalAccessError("Transient used after persistent! call");
-
-//		root = editableRoot(root);
-//		tail = editableTail(tail);
-	}
-
-	static Node editableRoot(Node node){
-		return new Node(new AtomicReference<Thread>(Thread.currentThread()), node.array.clone());
 	}
 
 	public PersistentVector persistent(){
@@ -564,7 +560,7 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 //			{
 //			throw new IllegalAccessError("Mutation release by non-owner thread");
 //			}
-		root.edit.set(null);
+		edit.set(null);
 		Object[] trimmedTail = new Object[cnt-tailoff()];
 		System.arraycopy(tail,0,trimmedTail,0,trimmedTail.length);
 		return new PersistentVector(cnt, shift, root, trimmedTail);
@@ -588,16 +584,16 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 			}
 		//full tail, push into tree
 		Node newroot;
-		Node tailnode = new Node(root.edit, tail);
+		Node tailnode = new Node(edit, tail);
 		tail = new Object[32];
 		tail[0] = val;
 		int newshift = shift;
 		//overflow root?
 		if((cnt >>> 5) > (1 << shift))
 			{
-			newroot = new Node(root.edit);
+			newroot = new Node(edit);
 			newroot.array[0] = root;
-			newroot.array[1] = newPath(root.edit,shift, tailnode);
+			newroot.array[1] = newPath(edit, shift, tailnode);
 			newshift += 5;
 			}
 		else
@@ -626,7 +622,7 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 			Node child = (Node) parent.array[subidx];
 			nodeToInsert = (child != null) ?
 			               pushTail(level - 5, child, tailnode)
-			                               : newPath(root.edit, level - 5, tailnode);
+			                               : newPath(edit, level - 5, tailnode);
 			}
 		ret.array[subidx] = nodeToInsert;
 		return ret;
@@ -777,7 +773,7 @@ static final class TransientVector extends AFn implements ITransientVector, ITra
 		int newshift = shift;
 		if(newroot == null)
 			{
-			newroot = new Node(root.edit);
+			newroot = new Node(edit);
 			}
 		if(shift > 5 && newroot.array[1] == null)
 			{
